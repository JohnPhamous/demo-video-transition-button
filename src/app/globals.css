@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --foreground-rgb: 0, 0, 0;
  --background-start-rgb: 214, 219, 220;
  --background-end-rgb: 255, 255, 255;
}

@media (prefers-color-scheme: dark) {
  :root {
    --foreground-rgb: 255, 255, 255;
    --background-start-rgb: 0, 0, 0;
    --background-end-rgb: 0, 0, 0;
  }
}

body {
  color: rgb(var(--foreground-rgb));
  background: linear-gradient(
      to bottom,
      transparent,
      rgb(var(--background-end-rgb))
    )
    rgb(var(--background-start-rgb));
}

.btn {
  view-transition-name: video;
  transition: all 0.2s ease;
  position: relative;
  border-radius: 0;
  border: 1px solid transparent;
  background: black;
}

.btn.small {
  border: 1px solid #1f2937;
  border-radius: 999px;
  overflow: hidden;
  padding: 0 64px;
  cursor: pointer;
}

.btn.small video {
  height: 100px;
  scale: 2;
  filter: grayscale(0.8);
  transition: all 0.2s ease;
  opacity: 0.3;
}

.btn.small:hover video {
  filter: grayscale(0);
  opacity: 1;
}

.btn.small:hover {
  scale: 1.3;
}

.label {
  inset: 0;
  position: absolute;
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 9999;
  font-size: 32px;
  font-family: "Inter";
  font-weight: 500;
  transition: all 0.2s ease;
  color: white;
}

.btn:hover .label,
.btn.big .label {
  opacity: 0;
}

.btn.big .label {
  opacity: 0;
}

::view-transition-old(video),
::view-transition-new(video) {
  /* Prevent the default animation,
  so both views remain opacity:1 throughout the transition */
  animation: none;
  /* Use normal blending,
  so the new view sits on top and obscures the old view */
  mix-blend-mode: normal;
  /* Make the height the same as the group,
  meaning the view size might not match its aspect-ratio. */
  height: 100%;
  /* Clip any overflow of the view */
  overflow: clip;
}
